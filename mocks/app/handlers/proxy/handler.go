// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"context"
	"go-reverse-proxy/app/handlers/proxy"
	"go-reverse-proxy/app/values"
	"sync"
)

// Ensure, that HandlerMock does implement proxy.Handler.
// If this is not the case, regenerate this file with moq.
var _ proxy.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of proxy.Handler.
//
// 	func TestSomethingThatUsesHandler(t *testing.T) {
//
// 		// make and configure a mocked proxy.Handler
// 		mockedHandler := &HandlerMock{
// 			ForwardFunc: func(ctx context.Context, request *values.Request) ([]byte, int, error) {
// 				panic("mock out the Forward method")
// 			},
// 		}
//
// 		// use mockedHandler in code that requires proxy.Handler
// 		// and then make assertions.
//
// 	}
type HandlerMock struct {
	// ForwardFunc mocks the Forward method.
	ForwardFunc func(ctx context.Context, request *values.Request) ([]byte, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Forward holds details about calls to the Forward method.
		Forward []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *values.Request
		}
	}
	lockForward sync.RWMutex
}

// Forward calls ForwardFunc.
func (mock *HandlerMock) Forward(ctx context.Context, request *values.Request) ([]byte, int, error) {
	if mock.ForwardFunc == nil {
		panic("HandlerMock.ForwardFunc: method is nil but Handler.Forward was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *values.Request
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockForward.Lock()
	mock.calls.Forward = append(mock.calls.Forward, callInfo)
	mock.lockForward.Unlock()
	return mock.ForwardFunc(ctx, request)
}

// ForwardCalls gets all the calls that were made to Forward.
// Check the length with:
//     len(mockedHandler.ForwardCalls())
func (mock *HandlerMock) ForwardCalls() []struct {
	Ctx     context.Context
	Request *values.Request
} {
	var calls []struct {
		Ctx     context.Context
		Request *values.Request
	}
	mock.lockForward.RLock()
	calls = mock.calls.Forward
	mock.lockForward.RUnlock()
	return calls
}
