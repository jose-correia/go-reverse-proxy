// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"context"
	"go-reverse-proxy/app/handlers/loadbalancing"
	"go-reverse-proxy/app/values"
	"sync"
)

// Ensure, that HandlerMock does implement loadbalancing.Handler.
// If this is not the case, regenerate this file with moq.
var _ loadbalancing.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of loadbalancing.Handler.
//
// 	func TestSomethingThatUsesHandler(t *testing.T) {
//
// 		// make and configure a mocked loadbalancing.Handler
// 		mockedHandler := &HandlerMock{
// 			SetNextHostFunc: func(ctx context.Context, service *values.Service)  {
// 				panic("mock out the SetNextHost method")
// 			},
// 		}
//
// 		// use mockedHandler in code that requires loadbalancing.Handler
// 		// and then make assertions.
//
// 	}
type HandlerMock struct {
	// SetNextHostFunc mocks the SetNextHost method.
	SetNextHostFunc func(ctx context.Context, service *values.Service)

	// calls tracks calls to the methods.
	calls struct {
		// SetNextHost holds details about calls to the SetNextHost method.
		SetNextHost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Service is the service argument value.
			Service *values.Service
		}
	}
	lockSetNextHost sync.RWMutex
}

// SetNextHost calls SetNextHostFunc.
func (mock *HandlerMock) SetNextHost(ctx context.Context, service *values.Service) {
	if mock.SetNextHostFunc == nil {
		panic("HandlerMock.SetNextHostFunc: method is nil but Handler.SetNextHost was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Service *values.Service
	}{
		Ctx:     ctx,
		Service: service,
	}
	mock.lockSetNextHost.Lock()
	mock.calls.SetNextHost = append(mock.calls.SetNextHost, callInfo)
	mock.lockSetNextHost.Unlock()
	mock.SetNextHostFunc(ctx, service)
}

// SetNextHostCalls gets all the calls that were made to SetNextHost.
// Check the length with:
//     len(mockedHandler.SetNextHostCalls())
func (mock *HandlerMock) SetNextHostCalls() []struct {
	Ctx     context.Context
	Service *values.Service
} {
	var calls []struct {
		Ctx     context.Context
		Service *values.Service
	}
	mock.lockSetNextHost.RLock()
	calls = mock.calls.SetNextHost
	mock.lockSetNextHost.RUnlock()
	return calls
}
